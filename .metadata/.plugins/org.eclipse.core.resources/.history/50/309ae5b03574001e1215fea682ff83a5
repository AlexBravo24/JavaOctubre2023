package com.logica;

import java.util.Map;

import com.modelo.Cuenta;
import com.respuesta.Ticket;
import com.servicio.IMetodos;

public class Cajero implements IMetodos {
	//clase que va a implementar las acciones o logica
	//de las operaciones
	
	private Map<Integer, Cuenta> cuentas;
	private String sucursal;
	private int idcajero;
	private int folio=1;
	
	public Cajero() {}
	
	public Cajero(Map<Integer, Cuenta> cuentas, String sucursal, int idcajero) {
		super();
		this.cuentas = cuentas;
		this.sucursal = sucursal;
		this.idcajero = idcajero;
	}
	
	
	

	@Override
	public Cuenta buscarcuenta(int numerocuenta) {
		//como tenemos que retornar el valor de una cuenta
		//instanciamos una, momentaneamente vacia
		Cuenta cuenta =null; //nula porque si la cuenta no existe
		//retornaremos un valor nulo
		//si la cuenta existe, le asignamos a ella
		cuenta=cuentas.get(numerocuenta);
		return cuenta;
	}

	@Override
	public Ticket retirar(int numerocuenta, double monto) {
		//como tenemos que responder o devolver el valor de un ticket
				//instanciamos uno vacio de momento
			Ticket ticket =null;
				//para hace run retiro necesitamos buscar la cuenta de la cual retiraremos
				//recursos
		if(buscarcuenta(numerocuenta)!=null) { //la asignamos a un objeto
					//cuenta para manipular su saldo
				Cuenta cuenta=buscarcuenta(numerocuenta);
			//los cajero en la vida real, realizan ciertas validaciones
					//para realizar las operaciones
			if(monto>8000) { //validamos la condicion que el cajero tiene
						//de retiros en ese dia
			System.out.println("el monto excede el maximo permitido por el cajero");
			return ticket;
			//ahora validamos si el monto puede retirarse, que la cuenta tenga fondos suficientes
			
			}else if(cuenta.getSaldo()<monto) {
				System.out.println("la cuenta no tiene saldo suficiente");
				return ticket;
				//siguiente validacion, si la cuenta tiene saldo suficiente,
				//pero esto deja por debajo del saldo minimo a la cuenta
			}else if(cuenta.getSaldo()-monto<cuenta.getMinimo()) {
				System.out.println("el retiro dejaria por debajo del saldo minimo a la cuenta");
				return ticket;
			}else {//si el retiro si puede realizarse
				//actualizamos el saldo de la cuenta
				cuenta.setSaldo(cuenta.getSaldo()-monto);
				//entonces emitimos un nuevo
				ticket =new Ticket(folio++, new Date, cuenta.getNumerocuenta(), cuenta.getSaldo(), sucursal, idcajero);
			}
			
		}
				}
				
	@Override
	public Ticket depositar(int numerocuenta1, double monto) {
		return null;
		}

		
	

	@Override
	public Ticket transferir(int cuentaorigen, int cuentadestino, double monto) {
		// TODO Auto-generated method stub
		return null;
	}
	

	
	

}
